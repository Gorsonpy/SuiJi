// Code generated by hertz generator.

package consumption

import (
	"context"
	"strconv"
	"time"

	"github.com/XZ0730/runFzu/biz/model/base"
	"github.com/XZ0730/runFzu/biz/model/consumption"
	"github.com/XZ0730/runFzu/biz/pack"
	"github.com/XZ0730/runFzu/biz/service"
	"github.com/XZ0730/runFzu/pkg/errno"
	"github.com/XZ0730/runFzu/pkg/utils"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// UpdateConsumption .
// @router /api/consumption [PUT]
func UpdateConsumption(ctx context.Context, c *app.RequestContext) {
	var err error
	var req consumption.ConsumptionModel
	resp := new(consumption.ConsumptionUpdateResponse)
	baseResp := new(base.BaseResponse)
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.PackBase(baseResp, errno.ParamErrorCode, errno.ParamError.ErrorMsg)
		c.JSON(consts.StatusOK, baseResp)
		return
	}
	token_byte := c.GetHeader("token")
	claim, _ := utils.CheckToken(string(token_byte))
	userId := claim.UserId
	code, msg := service.NewConsumptionService().UpdateConsumption(userId, &req)
	pack.PackUpdateConsumptionResp(resp, &req, code, msg)
	c.JSON(consts.StatusOK, resp)
}

// GetSumByRange .
// @router /api/consumption/range/in [GET]
func GetSumByRange(ctx context.Context, c *app.RequestContext) {
	var err error
	var req consumption.BaseRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(consumption.GetSumByRangeResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetConsumptionByRange .
// @router /api/consumption/range/map [GET]
func GetConsumptionByRange(ctx context.Context, c *app.RequestContext) {
	start := c.Query("start")
	end := c.Query("end")

	token_byte := c.GetHeader("token")
	claim, _ := utils.CheckToken(string(token_byte))
	consumptions, code, msg := service.NewConsumptionService().GetConsumptionsByRange(start, end, claim.UserId)
	resp := new(consumption.GetConsumptionByRangeResponse)
	pack.PackConsumptionByRangeResp(resp, code, msg, consumptions)
	c.JSON(consts.StatusOK, resp)
}

// GetConsumptionByDate .
// @router /api/consumption/date [GET]
func GetConsumptionByDate(ctx context.Context, c *app.RequestContext) {
	var err error
	var req consumption.BaseRequest
	resp := new(consumption.GetConsumptionByRangeResponse)
	err = c.BindAndValidate(&req)

	date := c.Query("date")
	date_time, err := time.Parse(time.DateTime, date)
	if date == "" || err != nil {
		pack.PackConsumptionByRangeResp(resp, errno.ParamError.ErrorCode, errno.ParamError.ErrorMsg, nil)
		c.JSON(consts.StatusOK, resp)
		return
	}
	types := c.Query("type")
	the_type, err := strconv.ParseInt(types, 10, 32)
	if err != nil {
		pack.PackConsumptionByRangeResp(resp, errno.ParamError.ErrorCode, errno.ParamError.ErrorMsg, nil)
		c.JSON(consts.StatusOK, resp)
		return
	}
	token_byte := c.GetHeader("token")
	claim, _ := utils.CheckToken(string(token_byte))
	code, msg, cm := service.NewConsumptionService().GetConsumptionByDate(claim.UserId, date_time, the_type)
	pack.PackConsumptionByRangeResp(resp, code, msg, cm)
	c.JSON(consts.StatusOK, resp)
}
