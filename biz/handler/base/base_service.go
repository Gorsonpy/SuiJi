// Code generated by hertz generator.

package base

import (
	"context"

	base "github.com/XZ0730/runFzu/biz/model/base"
	"github.com/XZ0730/runFzu/biz/pack"
	"github.com/XZ0730/runFzu/biz/service"
	"github.com/XZ0730/runFzu/pkg/errno"
	"github.com/XZ0730/runFzu/pkg/utils"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// Ping .
// @router /ping [GET]
func Ping(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.BaseRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.BaseResponse)

	c.JSON(consts.StatusOK, resp)
}

// Register .
// @router /auth/register/pwd [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	resp := new(base.BaseResponse)
	var req base.RegisterReq
	err = c.BindAndValidate(&req)
	if err != nil || len(req.GetUsername()) < 5 || len(req.GetPassword()) < 5 {
		pack.PackBase(resp, errno.ParamErrorCode, errno.ParamError.ErrorMsg)
		c.JSON(consts.StatusOK, resp)
		return
	}
	code, msg := service.NewUserService().Register(&req)
	if code != 200 {
		pack.PackBase(resp, code, msg)
		c.JSON(consts.StatusOK, resp)
		return
	}
	pack.PackBase(resp, errno.StatusSuccessCode, errno.StatusSuccessMsg)
	c.JSON(consts.StatusOK, resp)
}

// Login .
// @router /auth/login/pwd [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	var err error
	resp := new(base.LoginResponse)
	var req base.LoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.PackLogin(resp, errno.ParamErrorCode, errno.ParamError.ErrorMsg, "")
		c.JSON(consts.StatusOK, resp)
		return
	}
	code, msg, user_id := service.NewUserService().Login(req.Username, req.Password)
	if code != 200 {
		// pack 然后返回resp
		pack.PackLogin(resp, code, msg, "")
		c.JSON(consts.StatusOK, resp)
		return
	}
	token, err := utils.CreateToken(user_id)
	if err != nil {
		pack.PackLogin(resp, -1, "token generate error", "")
	}
	pack.PackLogin(resp, errno.StatusSuccessCode, errno.StatusSuccessMsg, token)
	c.JSON(consts.StatusOK, resp)
}
