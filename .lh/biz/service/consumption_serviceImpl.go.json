{
    "sourceFile": "biz/service/consumption_serviceImpl.go",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1701090503262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1701090544782,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,10 +69,12 @@\n \t}\n \treturn list, errno.StatusSuccessCode, errno.StatusSuccessMsg\n }\n \n-func (c *ConsumptionService) GetSumByRange(start string, end string, userId int64, op int)\n+func (c *ConsumptionService) GetSumByRange(start string, end string, userId int64, op int64) {\n \n+}\n+\n func (c *ConsumptionService) GetConsumptionByDate(uid int64, date time.Time, the_type int64) (int64, string, []*consumption.ConsumptionModel) {\n \tlist := make([]*consumption.ConsumptionModel, 0)\n \tvar start time.Time\n \tvar end time.Time\n"
                },
                {
                    "date": 1701090569163,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,9 @@\n \t}\n \treturn list, errno.StatusSuccessCode, errno.StatusSuccessMsg\n }\n \n-func (c *ConsumptionService) GetSumByRange(start string, end string, userId int64, op int64) {\n+func (c *ConsumptionService) GetSumByRange(start string, end string, userId int64, op int64) (int64, string, float64) {\n \n }\n \n func (c *ConsumptionService) GetConsumptionByDate(uid int64, date time.Time, the_type int64) (int64, string, []*consumption.ConsumptionModel) {\n"
                },
                {
                    "date": 1701090753825,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,9 +70,15 @@\n \treturn list, errno.StatusSuccessCode, errno.StatusSuccessMsg\n }\n \n func (c *ConsumptionService) GetSumByRange(start string, end string, userId int64, op int64) (int64, string, float64) {\n+\tledgerIds := db.GetLedgersByUserId(userId)\n+\tconsumptions := db.GetConByRange(start, end, ledgerIds)\n \n+\tsum := 0.0\n+\tfor _, val := range consumptions{\n+\t\tif val.Amount\n+\t}\n }\n \n func (c *ConsumptionService) GetConsumptionByDate(uid int64, date time.Time, the_type int64) (int64, string, []*consumption.ConsumptionModel) {\n \tlist := make([]*consumption.ConsumptionModel, 0)\n"
                },
                {
                    "date": 1701090886104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,11 @@\n \tconsumptions := db.GetConByRange(start, end, ledgerIds)\n \n \tsum := 0.0\n \tfor _, val := range consumptions{\n-\t\tif val.Amount\n+\t\tx := val.Amount\n+\t\tif x * op > 0.0:\n+\t\t\tsum += x\n \t}\n }\n \n func (c *ConsumptionService) GetConsumptionByDate(uid int64, date time.Time, the_type int64) (int64, string, []*consumption.ConsumptionModel) {\n"
                },
                {
                    "date": 1701090986914,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,18 +69,21 @@\n \t}\n \treturn list, errno.StatusSuccessCode, errno.StatusSuccessMsg\n }\n \n-func (c *ConsumptionService) GetSumByRange(start string, end string, userId int64, op int64) (int64, string, float64) {\n+func (c *ConsumptionService) GetSumByRange(start string, end string, userId int64, op float64) (int64, string, float64) {\n \tledgerIds := db.GetLedgersByUserId(userId)\n \tconsumptions := db.GetConByRange(start, end, ledgerIds)\n \n \tsum := 0.0\n-\tfor _, val := range consumptions{\n+\tfor _, val := range consumptions {\n \t\tx := val.Amount\n-\t\tif x * op > 0.0:\n+\t\tif x*op > 0 {\n \t\t\tsum += x\n+\t\t}\n \t}\n+\n+\treturn errno.StatusSuccessCode, errno.StatusSuccessMsg, sum\n }\n \n func (c *ConsumptionService) GetConsumptionByDate(uid int64, date time.Time, the_type int64) (int64, string, []*consumption.ConsumptionModel) {\n \tlist := make([]*consumption.ConsumptionModel, 0)\n"
                },
                {
                    "date": 1701092046772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,26 +48,19 @@\n \tlist := make([]*consumption.ConsumptionModel, 0)\n \n \tfor _, val := range consumptions {\n \t\ttmp := val\n-\t\teg.Go(func() error {\n-\t\t\tvo_g := new(consumption.ConsumptionModel)\n-\t\t\tvo_g.ConsumptionId = tmp.ConsumptionId\n-\t\t\tvo_g.ConsumptionName = tmp.ConsumptionName\n-\t\t\tvo_g.Amount = tmp.Amount\n-\t\t\tvo_g.Description = tmp.Description\n-\t\t\tvo_g.TypeId = tmp.TypeId\n-\t\t\tvo_g.ConsumeTime = tmp.ConsumeTime.Format(time.DateTime)\n-\t\t\tvo_g.Store = tmp.Store\n-\t\t\tvo_g.Credential = tmp.Credential\n-\t\t\tlist = append(list, vo_g)\n-\t\t\treturn nil\n-\t\t})\n+\t\tvo_g := new(consumption.ConsumptionModel)\n+\t\tvo_g.ConsumptionId = tmp.ConsumptionId\n+\t\tvo_g.ConsumptionName = tmp.ConsumptionName\n+\t\tvo_g.Amount = tmp.Amount\n+\t\tvo_g.Description = tmp.Description\n+\t\tvo_g.TypeId = tmp.TypeId\n+\t\tvo_g.ConsumeTime = tmp.ConsumeTime.Format(time.DateTime)\n+\t\tvo_g.Store = tmp.Store\n+\t\tvo_g.Credential = tmp.Credential\n+\t\tlist = append(list, vo_g)\n \t}\n-\tif err := eg.Wait(); err != nil {\n-\t\tklog.Info(\"[consumption]get error:\", err.Error())\n-\t\treturn nil, errno.GetError.ErrorCode, errno.GetError.ErrorMsg\n-\t}\n \treturn list, errno.StatusSuccessCode, errno.StatusSuccessMsg\n }\n \n func (c *ConsumptionService) GetSumByRange(start string, end string, userId int64, op float64) (int64, string, float64) {\n"
                },
                {
                    "date": 1701092068058,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,8 @@\n func (c *ConsumptionService) GetConsumptionsByRange(start string, end string, userId int64) ([]*consumption.ConsumptionModel, int64, string) {\n \tledgerIds := db.GetLedgersByUserId(userId)\n \tconsumptions := db.GetConByRange(start, end, ledgerIds)\n \n-\tvar eg errgroup.Group\n \tlist := make([]*consumption.ConsumptionModel, 0)\n \n \tfor _, val := range consumptions {\n \t\ttmp := val\n"
                },
                {
                    "date": 1701092283693,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,23 +43,31 @@\n func (c *ConsumptionService) GetConsumptionsByRange(start string, end string, userId int64) ([]*consumption.ConsumptionModel, int64, string) {\n \tledgerIds := db.GetLedgersByUserId(userId)\n \tconsumptions := db.GetConByRange(start, end, ledgerIds)\n \n+\tvar eg errgroup.Group\n \tlist := make([]*consumption.ConsumptionModel, 0)\n \n \tfor _, val := range consumptions {\n \t\ttmp := val\n-\t\tvo_g := new(consumption.ConsumptionModel)\n-\t\tvo_g.ConsumptionId = tmp.ConsumptionId\n-\t\tvo_g.ConsumptionName = tmp.ConsumptionName\n-\t\tvo_g.Amount = tmp.Amount\n-\t\tvo_g.Description = tmp.Description\n-\t\tvo_g.TypeId = tmp.TypeId\n-\t\tvo_g.ConsumeTime = tmp.ConsumeTime.Format(time.DateTime)\n-\t\tvo_g.Store = tmp.Store\n-\t\tvo_g.Credential = tmp.Credential\n-\t\tlist = append(list, vo_g)\n+\t\teg.Go(func() error {\n+\t\t\tvo_g := new(consumption.ConsumptionModel)\n+\t\t\tvo_g.ConsumptionId = tmp.ConsumptionId\n+\t\t\tvo_g.ConsumptionName = tmp.ConsumptionName\n+\t\t\tvo_g.Amount = tmp.Amount\n+\t\t\tvo_g.Description = tmp.Description\n+\t\t\tvo_g.TypeId = tmp.TypeId\n+\t\t\tvo_g.ConsumeTime = tmp.ConsumeTime.Format(time.DateTime)\n+\t\t\tvo_g.Store = tmp.Store\n+\t\t\tvo_g.Credential = tmp.Credential\n+\t\t\tlist = append(list, vo_g)\n+\t\t\treturn nil\n+\t\t})\n \t}\n+\tif err := eg.Wait(); err != nil {\n+\t\tklog.Info(\"[consumption]get error:\", err.Error())\n+\t\treturn nil, errno.GetError.ErrorCode, errno.GetError.ErrorMsg\n+\t}\n \treturn list, errno.StatusSuccessCode, errno.StatusSuccessMsg\n }\n \n func (c *ConsumptionService) GetSumByRange(start string, end string, userId int64, op float64) (int64, string, float64) {\n"
                }
            ],
            "date": 1701090503262,
            "name": "Commit-0",
            "content": "package service\n\nimport (\n\t\"time\"\n\n\t\"github.com/XZ0730/runFzu/biz/dal/db\"\n\t\"github.com/XZ0730/runFzu/biz/model/consumption\"\n\t\"github.com/XZ0730/runFzu/pkg/errno\"\n\t\"github.com/cloudwego/kitex/pkg/klog\"\n\t\"golang.org/x/sync/errgroup\"\n)\n\nfunc (c *ConsumptionService) UpdateConsumption(userId int64, model *consumption.ConsumptionModel) (int64, string) {\n\tif err := db.JudgeConsumption(model.ConsumptionId); err != nil {\n\t\tklog.Error(\"[consumption] update error\", err.Error())\n\t\treturn errno.NotExistErrorCode, errno.NotExistError.ErrorMsg\n\t}\n\n\tledgerId, err := db.GetLedgerIdByConsumption(model.ConsumptionId)\n\tif err != nil {\n\t\tklog.Error(\"[consumption] error\", err.Error())\n\t\treturn errno.NotExistErrorCode, errno.NotExistError.ErrorMsg\n\t}\n\n\tif err = db.JudgeUserHaveLedger(ledgerId, userId); err != nil {\n\t\tklog.Error(\"[consumption] error\", err.Error())\n\t\treturn errno.NotExistErrorCode, errno.NotExistError.ErrorMsg\n\t}\n\n\tc_time, err := time.Parse(time.DateTime, model.GetConsumeTime())\n\tif err != nil {\n\t\tklog.Error(\"[consumption] error:\", err.Error())\n\t\treturn errno.TimeError.ErrorCode, errno.TimeError.ErrorMsg\n\t}\n\tcon := db.NewConsumptionAllParams(model.ConsumptionId, model.GetAmount(), model.GetConsumptionName(), model.GetDescription(), model.GetTypeId(), model.GetStore(), c_time, model.GetCredential())\n\tif err = db.UpdateConsumption(con); err != nil {\n\t\tklog.Error(\"[consumption] update error:\", err.Error())\n\t\treturn errno.UpdateErrorCode, errno.UpdateError.ErrorMsg\n\t}\n\treturn errno.StatusSuccessCode, errno.SuccessMsg\n}\n\nfunc (c *ConsumptionService) GetConsumptionsByRange(start string, end string, userId int64) ([]*consumption.ConsumptionModel, int64, string) {\n\tledgerIds := db.GetLedgersByUserId(userId)\n\tconsumptions := db.GetConByRange(start, end, ledgerIds)\n\n\tvar eg errgroup.Group\n\tlist := make([]*consumption.ConsumptionModel, 0)\n\n\tfor _, val := range consumptions {\n\t\ttmp := val\n\t\teg.Go(func() error {\n\t\t\tvo_g := new(consumption.ConsumptionModel)\n\t\t\tvo_g.ConsumptionId = tmp.ConsumptionId\n\t\t\tvo_g.ConsumptionName = tmp.ConsumptionName\n\t\t\tvo_g.Amount = tmp.Amount\n\t\t\tvo_g.Description = tmp.Description\n\t\t\tvo_g.TypeId = tmp.TypeId\n\t\t\tvo_g.ConsumeTime = tmp.ConsumeTime.Format(time.DateTime)\n\t\t\tvo_g.Store = tmp.Store\n\t\t\tvo_g.Credential = tmp.Credential\n\t\t\tlist = append(list, vo_g)\n\t\t\treturn nil\n\t\t})\n\t}\n\tif err := eg.Wait(); err != nil {\n\t\tklog.Info(\"[consumption]get error:\", err.Error())\n\t\treturn nil, errno.GetError.ErrorCode, errno.GetError.ErrorMsg\n\t}\n\treturn list, errno.StatusSuccessCode, errno.StatusSuccessMsg\n}\n\nfunc (c *ConsumptionService) GetSumByRange(start string, end string, userId int64, op int)\n\nfunc (c *ConsumptionService) GetConsumptionByDate(uid int64, date time.Time, the_type int64) (int64, string, []*consumption.ConsumptionModel) {\n\tlist := make([]*consumption.ConsumptionModel, 0)\n\tvar start time.Time\n\tvar end time.Time\n\tledger_id := db.GetLedgersByUserId(uid)\n\tif the_type == 1 {\n\t\tstart = time.Date(date.Year(), 1, 1, 0, 0, 0, 0, time.Local)\n\t\tend = time.Date(date.Year()+1, 1, 1, 0, 0, 0, 0, time.Local)\n\t} else if the_type == 2 {\n\t\tstart = time.Date(date.Year(), date.Month(), 1, 0, 0, 0, 0, time.Local)\n\t\tend = time.Date(date.Year(), date.Month()+1, 1, 0, 0, 0, 0, time.Local)\n\t} else {\n\t\tstart = time.Date(date.Year(), date.Month(), date.Day(), 0, 0, 0, 0, time.Local)\n\t\tend = time.Date(date.Year(), date.Month(), date.Day()+1, 0, 0, 0, 0, time.Local)\n\t}\n\tconsumptions := db.GetConByRange(start.Format(time.DateOnly), end.Format(time.DateOnly), ledger_id)\n\tvar eg errgroup.Group\n\tfor _, val := range consumptions {\n\t\ttmp := val\n\t\teg.Go(func() error {\n\t\t\tvo_g := new(consumption.ConsumptionModel)\n\t\t\tvo_g.ConsumptionId = tmp.ConsumptionId\n\t\t\tvo_g.ConsumptionName = tmp.ConsumptionName\n\t\t\tvo_g.Amount = tmp.Amount\n\t\t\tvo_g.Description = tmp.Description\n\t\t\tvo_g.TypeId = tmp.TypeId\n\t\t\tvo_g.ConsumeTime = tmp.ConsumeTime.Format(time.DateTime)\n\t\t\tvo_g.Store = tmp.Store\n\t\t\tvo_g.Credential = tmp.Credential\n\t\t\tlist = append(list, vo_g)\n\t\t\treturn nil\n\t\t})\n\t}\n\tif err := eg.Wait(); err != nil {\n\t\tklog.Info(\"[consumption]get error:\", err.Error())\n\t\treturn errno.GetError.ErrorCode, errno.GetError.ErrorMsg, nil\n\t}\n\treturn errno.StatusSuccessCode, errno.StatusSuccessMsg, list\n}\n"
        }
    ]
}