{
    "sourceFile": "biz/handler/consumption/consumption_service.go",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1701050211614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1701050211614,
            "name": "Commit-0",
            "content": "// Code generated by hertz generator.\n\npackage consumption\n\nimport (\n\t\"context\"\n\t\"strconv\"\n\t\"time\"\n\n\t\"github.com/XZ0730/runFzu/biz/model/base\"\n\t\"github.com/XZ0730/runFzu/biz/model/consumption\"\n\t\"github.com/XZ0730/runFzu/biz/pack\"\n\t\"github.com/XZ0730/runFzu/biz/service\"\n\t\"github.com/XZ0730/runFzu/pkg/errno\"\n\t\"github.com/XZ0730/runFzu/pkg/utils\"\n\t\"github.com/cloudwego/hertz/pkg/app\"\n\t\"github.com/cloudwego/hertz/pkg/protocol/consts\"\n)\n\n// UpdateConsumption .\n// @router /api/consumption [PUT]\nfunc UpdateConsumption(ctx context.Context, c *app.RequestContext) {\n\tvar err error\n\tvar req consumption.ConsumptionModel\n\tresp := new(consumption.ConsumptionUpdateResponse)\n\tbaseResp := new(base.BaseResponse)\n\terr = c.BindAndValidate(&req)\n\tif err != nil {\n\t\tpack.PackBase(baseResp, errno.ParamErrorCode, errno.ParamError.ErrorMsg)\n\t\tc.JSON(consts.StatusOK, baseResp)\n\t\treturn\n\t}\n\ttoken_byte := c.GetHeader(\"token\")\n\tclaim, _ := utils.CheckToken(string(token_byte))\n\tuserId := claim.UserId\n\tcode, msg := service.NewConsumptionService().UpdateConsumption(userId, &req)\n\tpack.PackUpdateConsumptionResp(resp, &req, code, msg)\n\tc.JSON(consts.StatusOK, resp)\n}\n\n// GetSumByRange .\n// @router /api/consumption/range/in [GET]\nfunc GetSumByRange(ctx context.Context, c *app.RequestContext) {\n\tvar err error\n\tvar req consumption.BaseRequest\n\terr = c.BindAndValidate(&req)\n\tif err != nil {\n\t\tc.String(consts.StatusBadRequest, err.Error())\n\t\treturn\n\t}\n\n\tresp := new(consumption.GetInByRangeResponse)\n\tc.JSON(consts.StatusOK, resp)\n}\n\n// GetConsumptionByRange .\n// @router /api/consumption/range/map [GET]\nfunc GetConsumptionByRange(ctx context.Context, c *app.RequestContext) {\n\tstart := c.Query(\"start\")\n\tend := c.Query(\"end\")\n\n\ttoken_byte := c.GetHeader(\"token\")\n\tclaim, _ := utils.CheckToken(string(token_byte))\n\tconsumptions, code, msg := service.NewConsumptionService().GetConsumptionsByRange(start, end, claim.UserId)\n\tresp := new(consumption.GetConsumptionByRangeResponse)\n\tpack.PackConsumptionByRangeResp(resp, code, msg, consumptions)\n\tc.JSON(consts.StatusOK, resp)\n}\n\n// GetConsumptionByDate .\n// @router /api/consumption/date [GET]\nfunc GetConsumptionByDate(ctx context.Context, c *app.RequestContext) {\n\tvar err error\n\tresp := new(consumption.GetConsumptionByRangeResponse)\n\tdate := c.Query(\"date\")\n\tdate_time, err := time.Parse(time.DateTime, date)\n\tif date == \"\" || err != nil {\n\t\tpack.PackConsumptionByRangeResp(resp, errno.ParamError.ErrorCode, errno.ParamError.ErrorMsg, nil)\n\t\tc.JSON(consts.StatusOK, resp)\n\t\treturn\n\t}\n\ttypes := c.Query(\"type\")\n\tthe_type, err := strconv.ParseInt(types, 10, 32)\n\tif err != nil {\n\t\tpack.PackConsumptionByRangeResp(resp, errno.ParamError.ErrorCode, errno.ParamError.ErrorMsg, nil)\n\t\tc.JSON(consts.StatusOK, resp)\n\t\treturn\n\t}\n\ttoken_byte := c.GetHeader(\"token\")\n\tclaim, _ := utils.CheckToken(string(token_byte))\n\tcode, msg, cm := service.NewConsumptionService().GetConsumptionByDate(claim.UserId, date_time, the_type)\n\tpack.PackConsumptionByRangeResp(resp, code, msg, cm)\n\tc.JSON(consts.StatusOK, resp)\n}\n\n// GetOutByRange .\n// @router api/consumption/range/out [GET]\nfunc GetOutByRange(ctx context.Context, c *app.RequestContext) {\n\tvar err error\n\tvar req consumption.BaseRequest\n\terr = c.BindAndValidate(&req)\n\tif err != nil {\n\t\tc.String(consts.StatusBadRequest, err.Error())\n\t\treturn\n\t}\n\n\tresp := new(consumption.GetOutByRangeResponse)\n\n\tc.JSON(consts.StatusOK, resp)\n}\n\n// GetInByRange .\n// @router /api/consumption/range/in [GET]\nfunc GetInByRange(ctx context.Context, c *app.RequestContext) {\n\tvar err error\n\tvar req consumption.BaseRequest\n\terr = c.BindAndValidate(&req)\n\tif err != nil {\n\t\tc.String(consts.StatusBadRequest, err.Error())\n\t\treturn\n\t}\n\n\tresp := new(consumption.GetInByRangeResponse)\n\n\tc.JSON(consts.StatusOK, resp)\n}\n"
        }
    ]
}